#pragma once
#include <limits>                       // numeric_limits
#include <tuple>                        // get, tuple
#include <utility>                      // make_pair
#include <boost/assert.hpp>             // BOOST_ASSERT
#include <boost/operators.hpp>          // totally_ordered
#include "Value_fwd.hpp"                // Value (primary template)
#include "../rules/Frisian_fwd.hpp"     // Frisian

namespace dctl {
namespace capture {

// partial specialization for Frisian draughts
template<typename Board>
struct Value<rules::Frisian, Board>
:
        // Curiously Recurring Template Pattern (CRTP)
        private boost::totally_ordered< Value<rules::Frisian, Board> >  // < >= > <= == !=
{
public:
        // structors

        Value()
        :
                data_() // std::tuple default constructor zero-intializes
        {
                BOOST_ASSERT(invariant());
        }

        // modifiers

        void increment(bool is_king)
        {
                BOOST_ASSERT(!full());
                num_kings() += is_king;
                ++num_pieces();
                BOOST_ASSERT(invariant());
        }

        void decrement(bool is_king)
        {
                BOOST_ASSERT(!empty(is_king));
                --num_pieces();
                num_kings() -= is_king;
                BOOST_ASSERT(invariant());
        }

        void toggle_with_king()
        {
                with_king() ^= true;
                BOOST_ASSERT(invariant());
        }

        // queries

        int count() const
        {
                return num_pieces();
        }

        // predicates

        // operator>=, operator>, operator<= automatically generated by boost::is_totally_ordered
        friend bool operator<(Value const& lhs, Value const& rhs)
        {
                auto const delta_kings = lhs.num_kings() - rhs.num_kings();
                auto const delta_pawns = lhs.num_pieces() - rhs.num_pieces() - delta_kings;

                // Art. 11
                if (delta_kings * delta_pawns < 0) {
                        // delta_kings and delta_pawns are both non-zero and have opposite sign
                        // [2 n - 1] pawns < [n] kings < [2 n] pawns
                        return delta_pawns + 2 * delta_kings - (delta_kings > 0) <  0;
                } else {
                        // delta_kings or delta_pawns is zero or they have equal sign
                        // delegate to std::pair::operator<
                        return (
                                std::make_pair(lhs.num_pieces(), lhs.with_king()) < 
                                std::make_pair(rhs.num_pieces(), rhs.with_king())
                        );
                }
        }

        // operator!= automatically generated by boost::is_totally_ordered
        friend bool operator==(Value const& lhs, Value const& rhs)
        {
                // delegate to std::tuple::operator==
                return lhs.data_ == rhs.data_;
        }

private:
        // modifiers

        int& num_pieces()
        {
                return std::get<0>(data_);
        }

        int& num_kings()
        {
                return std::get<1>(data_);
        }

        bool& with_king()
        {
                return std::get<2>(data_);
        }

        // queries

        int num_pieces() const
        {
                return std::get<0>(data_);
        }

        int num_kings() const
        {
                return std::get<1>(data_);
        }

        bool with_king() const
        {
                return std::get<2>(data_);
        }

        // predicates

        bool invariant() const
        {
                return (
                        (0 <= num_kings()) &&
                        (num_kings() <= num_pieces()) &&
                        (num_pieces() <= std::numeric_limits<int>::max())
                );
        }

        bool empty(bool is_king) const
        {
                return (is_king? num_kings() : num_pieces()) == 0;
        }

        bool full() const
        {
                return num_pieces() == std::numeric_limits<int>::max();
        }

        // representation

        std::tuple<int, int, bool> data_;
};

}       // namespace capture
}       // namespace dctl
