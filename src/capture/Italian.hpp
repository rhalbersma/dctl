#pragma once
#include <limits>                       // numeric_limits
#include <tuple>                        // get, tuple
#include <boost/assert.hpp>             // BOOST_ASSERT
#include <boost/operators.hpp>          // totally_ordered
#include "Value_fwd.hpp"                // Value (primary template)
#include "../rules/Italian_fwd.hpp"     // Italian
#include "../bit/Bit.hpp"               // count, reverse_singlet

namespace dctl {
namespace capture {

// partial specialization for Italian draughts
template<typename Board>
struct Value<rules::Italian, Board>
:
        // Curiously Recurring Template Pattern (CRTP)
        private boost::totally_ordered< Value<rules::Italian, Board> >  // < >= > <= == !=
{
private:
        // typedefs

        typedef typename Board::bit_type bit_type;

public:
        // structors

        Value()
        :
                data_() // std::tuple default constructor zero-initializes
        {
                BOOST_ASSERT(invariant());
        }

        // modifiers

        void increment(bool is_king)
        {
                BOOST_ASSERT(!full());
                if (is_king) {
                        piece_order() ^= bit::reverse_singlet<bit_type>(num_pieces());
                        ++num_kings();
                }
                ++num_pieces();
                BOOST_ASSERT(invariant());
        }

        void decrement(bool is_king)
        {
                BOOST_ASSERT(!empty(is_king));
                --num_pieces();
                if (is_king) {
                        --num_kings();
                        piece_order() ^= bit::reverse_singlet<bit_type>(num_pieces());
                }
                BOOST_ASSERT(invariant());
        }

        void toggle_with_king()
        {
                with_king() ^= true;
                BOOST_ASSERT(invariant());
        }

        // queries

        int count() const
        {
                return num_pieces();
        }

        // predicates

        // operator>=, operator>, operator<= automatically generated by boost::is_totally_ordered
        friend bool operator<(Value const& lhs, Value const& rhs)
        {
                // delegate to std::tuple::operator<
                return lhs.data_ < rhs.data_;
        }

        // operator!= automatically generated by boost::is_totally_ordered
        friend bool operator==(Value const& lhs, Value const& rhs)
        {
                // delegate to std::tuple::operator==
                return lhs.data_ == rhs.data_;
        }

private:
        // modifiers

        int& num_pieces()
        {
                return std::get<0>(data_);
        }

        int& num_kings()
        {
                return std::get<1>(data_);
        }

        bool& with_king()
        {
                return std::get<2>(data_);
        }

        bit_type& piece_order()
        {
                return std::get<3>(data_);
        }

        // queries

        int const& num_pieces() const
        {
                return std::get<0>(data_);
        }

        int const& num_kings() const
        {
                return std::get<1>(data_);
        }

        bool const& with_king() const
        {
                return std::get<2>(data_);
        }

        bit_type const& piece_order() const
        {
                return std::get<3>(data_);
        }

        // predicates

        bool invariant() const
        {
                return (
                        (0 <= num_kings()) &&
                        (num_kings() <= num_pieces()) &&
                        (num_pieces() <= std::numeric_limits<int>::max()) &&
                        (num_kings() == bit::count(piece_order())) &&
                        (!num_kings() || with_king())
                );
        }

        bool empty(bool is_king) const
        {
                return is_king? (num_kings() == 0 && piece_order() == 0) : (num_pieces() == 0);
        }

        bool full() const
        {
                return num_pieces() == std::numeric_limits<int>::max();
        }

        // representation

        std::tuple<int, int, bool, bit_type> data_;
};

}       // namespace capture
}       // namespace dctl
