#pragma once
#include <cstddef>                              // size_t
#include <cstdint>
#include <algorithm>
#include <iterator>
#include <utility>
#include <boost/operators.hpp>                  // totally_ordered
#include <dctl/preprocessor/cpp11/delete.hpp>   // DCTL_PP_IS_DELETE
#include <dctl/packed/iterator.hpp>

namespace dctl {
namespace packed {

template<typename Block = uint64_t, int N = 1>
struct set;

template<typename Block>
struct set<Block, 1>
:       boost::totally_ordered< set<Block, 1>
,       boost::bitwise< set<Block, 1>
,       boost::shiftable< set<Block, 1>, std::size_t
> > >
{
public:
        typedef int key_type;
        typedef int value_type;
        typedef std::size_t size_type;
        typedef std::ptrdiff_t difference_type;
        typedef bit_reference<Block> reference;
        typedef bit_reference<Block> const_reference;
        typedef bit_iterator<Block> iterator;
        typedef bit_iterator<Block> const_iterator;

        set()
        :
                data_()
        {}

        explicit set(Block const& b)
        :
                data_(b)
        {}

        template<typename InputIt>
        set(InputIt first, InputIt last)
        :
                data_(0)
        {
                BOOST_ASSERT(empty());
                for (auto it = first; it != last; ++it)
                         insert(*it);
        }

        set(std::initializer_list<value_type> init)
        :
                data_(0)
        {
                BOOST_ASSERT(empty());
                for (auto i: init)
                        insert(i);
        }

        iterator begin()
        {
                return iterator(data_);
        }

        const_iterator begin() const
        {
                return const_iterator(data_);
        }

        const_iterator cbegin() const
        {
                return const_iterator(data_);
        }

        iterator end()
        {
                return iterator(Block(0));
        }

        const_iterator end() const
        {
                return const_iterator(Block(0));
        }

        const_iterator cend() const
        {
                return const_iterator(Block(0));
        }

        bool empty() const
        {
                return data_ == 0;
        }

        size_type size() const
        {
                return __builtin_popcountll(data_);
        }

        size_type max_size() const
        {
                return 8 * sizeof(Block);
        }

        void clear()
        {
                data_ = 0;
                BOOST_ASSERT(empty());
        }

        std::pair<iterator, bool> insert(value_type const& value)
        {
                data_ |= element(value);
                return std::make_pair(iterator(data_), true);
        }

        std::pair<iterator, bool> insert(value_type&& value)
        {
                data_ |= element(std::move(value));
                return std::make_pair(iterator(data_), true);
        }

        iterator insert(const_iterator /*hint*/, value_type value)
        {
                insert(value);
                return iterator(data_);
        }

        template<typename InputIt>
        void insert(InputIt first, InputIt last)
        {
                for (auto it = first; it != last; ++it)
                        insert(*it);
        }

        void insert(std::initializer_list<value_type> const& ilist)
        {
                for (auto const& i: ilist)
                        insert(i);
        }

        void erase(iterator pos)
        {
                erase(*pos);
        }

        void erase(iterator first, iterator last)
        {
                for (auto it = first; it != last; ++it)
                        erase(*it);
        }

        void erase(key_type const& key)
        {
                data_ &= ~element(key);
        }

        void swap(set& other)
        {
                using std::swap;
                swap(data_, other.data_);
        }

        bool count(key_type const& key) const
        {
                return (data_ & element(key)) != 0;
        }

        iterator find(key_type const& key)
        {
                auto result = data_ & element(key);
                return result? iterator(result) : end();
        }

        const_iterator find(key_type const& key) const
        {
                auto result = data_ & element(key);
                return result? const_iterator(&data_, result) : end();
        }

        // operator!= automatically generated by boost::totally_ordered
        friend bool operator==(set const& lhs, set const& rhs)
        {
                return lhs.data_ == rhs.data_;
        }

        // operator>=, operator>, operator<= automatically generated by boost::totally_ordered
        friend bool operator<(set const& lhs, set const& rhs)
        {
                return lhs.data_ < rhs.data_;
        }

        // operator& automatically generated by boost::bitwise
        set& operator&=(set const& other)
        {
                data_ &= other.data_;
                return *this;
        }

        // operator| automatically generated by boost::bitwise
        set& operator|=(set const& other)
        {
                data_ |= other.data_;
                return *this;
        }

        // operator^ automatically generated by boost::bitwise
        set& operator^=(set const& other)
        {
                data_ ^= other.data_;
                return *this;
        }

        // operator<< automatically generated by boost::shiftable
        set& operator<<=(std::size_t n)
        {
                BOOST_ASSERT(n < max_size());
                data_ <<= n;
                return *this;
        }

        // operator>> automatically generated by boost::shiftable
        set& operator>>=(std::size_t n)
        {
                BOOST_ASSERT(n < max_size());
                data_ >>= n;
                return *this;
        }

        set& flip()
        {
                data_ = ~data_;
                return *this;
        }

private:
        bool invariant() const
        {
                return std::is_sorted(begin(), end()) && std::distance(begin(), end()) == size();
        }

        Block element(key_type const& key) const
        {
                BOOST_ASSERT(key < static_cast<int>(max_size()));
                return Block(1) << key;
        }

        Block data_;
};

}       // namespace packed
}       // namespace dctl
