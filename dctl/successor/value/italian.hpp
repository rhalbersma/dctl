#pragma once
#include <algorithm>                    // count
#include <deque>                        // deque (avoids the infamous vector<bool>)
#include <iterator>                     // begin, end
#include <limits>                       // numeric_limits
#include <tuple>                        // get, tuple
#include <boost/assert.hpp>             // BOOST_ASSERT
#include <boost/operators.hpp>          // totally_ordered
#include <dctl/bit/bit.hpp>             // count, reverse_singlet
#include <dctl/successor/value_fwd.hpp> // Value (primary template)
#include <dctl/rules/italian_fwd.hpp>   // Italian

namespace dctl {
namespace successor {

// specialization for Italian draughts
template<>
struct Value<rules::Italian>
:
        // Curiously Recurring Template Pattern (CRTP)
        private boost::totally_ordered< Value<rules::Italian> > // < >= > <= == !=
{
public:
        // structors

        Value()
        :
                data_() // std::tuple default constructor zero-initializes
        {
                BOOST_ASSERT(invariant());
        }

        // modifiers

        void increment(bool is_king)
        {
                BOOST_ASSERT(!full());
                piece_order().push_back(is_king);
                num_kings() += is_king;
                ++num_pieces();
                BOOST_ASSERT(invariant());
        }

        void decrement(bool is_king)
        {
                BOOST_ASSERT(!empty(is_king) && !piece_order().empty() && piece_order().back() == is_king);
                --num_pieces();
                num_kings() -= is_king;
                piece_order().pop_back();
                BOOST_ASSERT(invariant());
        }

        void toggle_with_king()
        {
                with_king() ^= true;
                BOOST_ASSERT(invariant());
        }

        // queries

        int count() const
        {
                return num_pieces();
        }

        // predicates

        // operator>=, operator>, operator<= automatically generated by boost::totally_ordered
        friend bool operator<(Value const& lhs, Value const& rhs)
        {
                // delegate to std::tuple::operator<
                // NOTE: this will -in turn- delegate to std::deque::operator< for the last tuple element
                return lhs.data_ < rhs.data_;
        }

        // operator!= automatically generated by boost::totally_ordered
        friend bool operator==(Value const& lhs, Value const& rhs)
        {
                // delegate to std::tuple::operator==
                // NOTE: this will -in turn- delegate to std::deque::operator== for the last tuple element
                return lhs.data_ == rhs.data_;
        }

private:
        // modifiers

        int& num_pieces()
        {
                return std::get<num_pieces_>(data_);
        }

        int& num_kings()
        {
                return std::get<num_kings_>(data_);
        }

        bool& with_king()
        {
                return std::get<with_king_>(data_);
        }

        std::deque<bool>& piece_order()
        {
                return std::get<piece_order_>(data_);
        }

        // queries

        int const& num_pieces() const
        {
                return std::get<num_pieces_>(data_);
        }

        int const& num_kings() const
        {
                return std::get<num_kings_>(data_);
        }

        bool const& with_king() const
        {
                return std::get<with_king_>(data_);
        }

        std::deque<bool> const& piece_order() const
        {
                return std::get<piece_order_>(data_);
        }

        // predicates

        bool invariant() const
        {
                return (
                        (0 <= num_kings()) &&
                        (num_kings() <= num_pieces()) &&
                        (num_pieces() <= std::numeric_limits<int>::max()) &&
                        (num_kings() == std::count(std::begin(piece_order()), std::end(piece_order()), true)) &&
                        (!num_kings() || with_king())
                );
        }

        bool empty(bool is_king) const
        {
                return is_king? (num_kings() == 0) : (num_pieces() == 0);
        }

        bool full() const
        {
                return num_pieces() == std::numeric_limits<int>::max();
        }

        // representation

        enum { num_pieces_, num_kings_, with_king_, piece_order_ };
        std::tuple< int, int, bool, std::deque<bool> > data_;
};

}       // namespace successor
}       // namespace dctl
