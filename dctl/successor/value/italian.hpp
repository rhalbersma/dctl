#pragma once
#include <algorithm>                    // count
#include <cstddef>                      // size_t
#include <iterator>                     // begin, end
#include <limits>                       // numeric_limits
#include <tuple>                        // get, tuple
#include <vector>                       // vector
#include <boost/assert.hpp>             // BOOST_ASSERT
#include <boost/operators.hpp>          // totally_ordered
#include <dctl/bit/bit.hpp>             // count, reverse_singlet
#include <dctl/successor/value_fwd.hpp> // Value (primary template)
#include <dctl/rules/italian_fwd.hpp>   // Italian

namespace dctl {
namespace successor {

// specialization for Italian draughts
template<>
struct Value<rules::Italian>
:
        // Curiously Recurring Template Pattern (CRTP)
        private boost::totally_ordered< Value<rules::Italian> > // < >= > <= == !=
{
public:
        // structors

        Value()
        :
                data_() // std::tuple default constructor zero-initializes
        {
                BOOST_ASSERT(invariant());
        }

        // modifiers

        void increment(bool is_king)
        {
                BOOST_ASSERT(!full());
                if (is_king) {
                        king_order().push_back(reverse());
                        ++num_kings();
                }
                ++num_pieces();
                BOOST_ASSERT(invariant());
        }

        void decrement(bool is_king)
        {
                BOOST_ASSERT(!empty());
                --num_pieces();
                if (is_king) {
                        --num_kings();
                        BOOST_ASSERT(king_order().back() == reverse());
                        king_order().pop_back();
                }
                BOOST_ASSERT(invariant());
        }

        void set_with_king()
        {
                BOOST_ASSERT(!with_king());
                with_king() = true;
                BOOST_ASSERT(invariant());
        }

        void clear_with_king()
        {
                BOOST_ASSERT(with_king());
                with_king() = false;
                BOOST_ASSERT(invariant());
        }

        // queries

        std::size_t count() const
        {
                return num_pieces();
        }

        // predicates

        // operator>=, operator>, operator<= automatically generated by boost::totally_ordered
        friend bool operator<(Value const& lhs, Value const& rhs)
        {
                // delegate to std::tuple::operator<
                // NOTE: this will -in turn- delegate to std::vector::operator< for the last tuple element
                return lhs.data_ < rhs.data_;
        }

        // operator!= automatically generated by boost::totally_ordered
        friend bool operator==(Value const& lhs, Value const& rhs)
        {
                // delegate to std::tuple::operator==
                // NOTE: this will -in turn- delegate to std::vector::operator== for the last tuple element
                return lhs.data_ == rhs.data_;
        }

private:
        // modifiers

        std::size_t& num_pieces()
        {
                return std::get<num_pieces_>(data_);
        }

        std::size_t& num_kings()
        {
                return std::get<num_kings_>(data_);
        }

        bool& with_king()
        {
                return std::get<with_king_>(data_);
        }

        std::vector<std::size_t>& king_order()
        {
                return std::get<king_order_>(data_);
        }

        // queries

        std::size_t const& num_pieces() const
        {
                return std::get<num_pieces_>(data_);
        }

        std::size_t const& num_kings() const
        {
                return std::get<num_kings_>(data_);
        }

        bool const& with_king() const
        {
                return std::get<with_king_>(data_);
        }

        std::vector<std::size_t> const& king_order() const
        {
                return std::get<king_order_>(data_);
        }

        std::size_t reverse() const
        {
                return std::numeric_limits<std::size_t>::max() - num_pieces();
        }

        // predicates

        bool invariant() const
        {
                return (
                        num_kings() <= num_pieces() &&
                        num_pieces() <= std::numeric_limits<std::size_t>::max() &&
                        num_kings() == king_order().size() &&
                        (!num_kings() || with_king())
                );
        }

        bool empty() const
        {
                return 0 == num_kings() && num_kings() == num_pieces() && king_order().empty();
        }

        bool full() const
        {
                return num_pieces() == std::numeric_limits<std::size_t>::max();
        }

        // representation

        enum { num_pieces_, num_kings_, with_king_, king_order_ };
        std::tuple< std::size_t, std::size_t, bool, std::vector<std::size_t> > data_;
};

}       // namespace successor
}       // namespace dctl
